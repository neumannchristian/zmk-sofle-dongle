#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 35    // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    zip_scroll_scaler: zip_scroll_scaler {
        compatible = "zmk,input-processor-scaler";
        #input-processor-cells = <2>;
        type = <INPUT_EV_REL>;
        codes = <INPUT_REL_WHEEL INPUT_REL_HWHEEL>;
        track-remainders;
    };
};

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <0>;      // 0
    time-to-max-speed-ms = <0>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <400>;
    acceleration-exponent = <1>;
};

/ {
    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <30>;
    };

    hrm_l: hrm_l {
        compatible = "zmk,behavior-hold-tap";
        label = "HRM_L";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <280>;
        flavor = "balanced";
        hold-trigger-key-positions = <57 56 55 54 53 7 8 9 10 11 12 20 21 22 23 24 25 33 34 35 36 37 38 46 47 48 49 50 51 60 61 62 63 59 52 6 19 45 58 32>;
        quick-tap-ms = <175>;
        hold-trigger-on-release;
        require-prior-idle-ms = <150>;
    };

    hrm_r: hrm_r {
        compatible = "zmk,behavior-hold-tap";
        label = "HRM_R";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <280>;
        flavor = "balanced";
        hold-trigger-key-positions = <59 60 61 62 63 0 1 2 3 4 5 6 13 14 15 16 17 18 19 26 27 28 29 30 31 32 39 40 41 42 43 44 52 53 54 55 56 57 58 45>;
        quick-tap-ms = <175>;
        hold-trigger-on-release;
        require-prior-idle-ms = <150>;
    };

    behaviors {
    };

    combos {
        compatible = "zmk,combos";

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <21 22>;
            require-prior-idle-ms = <150>;
            layers = <0>;
            timeout-ms = <18>;
        };

        delete {
            bindings = <&kp DELETE>;
            key-positions = <22 23>;
            layers = <0>;
            require-prior-idle-ms = <150>;
            timeout-ms = <18>;
        };

        para_left {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <34 35>;
            require-prior-idle-ms = <150>;
            layers = <0>;
            timeout-ms = <18>;
        };

        para_right {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <35 36>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <16 17>;
            require-prior-idle-ms = <150>;
            layers = <0>;
            timeout-ms = <18>;
        };

        tab {
            bindings = <&hrm_l LS(LEFT_ALT) TAB>;
            key-positions = <28 29>;
            require-prior-idle-ms = <150>;
            layers = <0>;
            timeout-ms = <18>;
        };

        copy {
            bindings = <&kp LG(C)>;
            key-positions = <41 42>;
            require-prior-idle-ms = <150>;
            layers = <0>;
            timeout-ms = <18>;
        };

        paste {
            bindings = <&kp LG(V)>;
            key-positions = <42 43>;
            require-prior-idle-ms = <150>;
            layers = <0>;
            timeout-ms = <18>;
        };

        cut {
            bindings = <&kp LG(X)>;
            key-positions = <43 41>;
            require-prior-idle-ms = <150>;
            layers = <0>;
            timeout-ms = <18>;
        };

        l_bracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <47 48>;
            require-prior-idle-ms = <150>;
            layers = <0>;
            timeout-ms = <18>;
        };

        r_bracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <48 49>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        at {
            bindings = <&kp AT>;
            key-positions = <15 28>;
            layers = <0>;
            require-prior-idle-ms = <50>;
            timeout-ms = <30>;
        };

        hash {
            bindings = <&kp HASH>;
            key-positions = <16 29>;
            layers = <0>;
            require-prior-idle-ms = <50>;
            timeout-ms = <30>;
        };

        dollar {
            bindings = <&kp DOLLAR>;
            key-positions = <17 30>;
            layers = <0>;
            require-prior-idle-ms = <50>;
            timeout-ms = <30>;
        };

        percent {
            bindings = <&kp PERCENT>;
            key-positions = <18 31>;
            layers = <0>;
            require-prior-idle-ms = <50>;
            timeout-ms = <30>;
        };

        caret {
            bindings = <&kp CARET>;
            key-positions = <20 33>;
            layers = <0>;
            require-prior-idle-ms = <50>;
            timeout-ms = <30>;
        };

        underscore {
            bindings = <&kp UNDERSCORE>;
            key-positions = <33 46>;
            layers = <0>;
            require-prior-idle-ms = <50>;
            timeout-ms = <30>;
        };

        ampersand {
            bindings = <&kp AMPERSAND>;
            key-positions = <23 36>;
            layers = <0>;
            require-prior-idle-ms = <50>;
            timeout-ms = <30>;
        };

        pipe {
            bindings = <&kp PIPE>;
            key-positions = <49 36>;
            layers = <0>;
            require-prior-idle-ms = <50>;
            timeout-ms = <30>;
        };

        slash {
            bindings = <&kp SLASH>;
            key-positions = <35 48>;
            layers = <0>;
            require-prior-idle-ms = <50>;
            timeout-ms = <30>;
        };

        backslash {
            bindings = <&kp BACKSLASH>;
            key-positions = <29 42>;
            layers = <0>;
            require-prior-idle-ms = <50>;
            timeout-ms = <30>;
        };

        equal {
            bindings = <&kp KP_EQUAL>;
            key-positions = <30 43>;
            layers = <0>;
            require-prior-idle-ms = <50>;
            timeout-ms = <30>;
        };

        excl {
            bindings = <&kp EXCL>;
            key-positions = <14 27>;
            require-prior-idle-ms = <50>;
            layers = <0>;
            timeout-ms = <30>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        q {
            bindings = <
&kp ESC                           &kp N1                 &kp N2             &kp N3             &kp N4               &kp N5       &kp UP_ARROW     &kp N6     &kp N7                &kp N8              &kp N9              &kp N0                     &kp MINUS
&kp TAB                           &kp Q                  &kp W              &kp E              &kp R                &kp T        &kp DOWN_ARROW   &kp Y      &kp U                 &kp I               &kp O               &kp P                      &kp LEFT_BRACKET
&hrm_l LEFT_SHIFT GRAVE           &hrm_l LEFT_CONTROL A  &hrm_l LEFT_ALT S  &hrm_l LEFT_GUI D  &hrm_l LEFT_SHIFT F  &kp G        &kp LEFT_ARROW   &kp H      &hrm_r RIGHT_SHIFT J  &hrm_r RIGHT_GUI K  &hrm_r RIGHT_ALT L  &hrm_r RIGHT_CONTROL SEMI  &hrm_r RIGHT_SHIFT APOS
&hrm_l LEFT_CONTROL LEFT_BRACKET  &kp Z                  &kp X              &kp C              &kp V                &kp B        &kp RIGHT_ARROW  &kp N      &kp M                 &kp COMMA           &kp DOT             &kp FSLH                   &hrm_r RIGHT_CONTROL BACKSLASH
&kp C_MUTE                        &kp LEFT_CONTROL       &kp LEFT_GUI       &mo 2              &kp LEFT_ALT         &kp SPACE    &kp ENTER        &kp SPACE  &kp ENTER             &mo 3               &kp BACKSPACE       &kp RIGHT_SHIFT
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
            display-name = "querty";
        };

        mine {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans     &trans   &trans  &trans
&trans  &kp J   &kp L   &kp U   &kp A   &kp Q     &trans  &kp W   &kp B   &kp D      &kp G    &kp Y   &kp Z
&trans  &kp C   &kp R   &kp I   &kp E   &kp O     &trans  &kp M   &kp N   &kp T      &kp S    &kp H   &trans
&trans  &kp V   &kp X   &trans  &trans  &trans    &trans  &kp P   &kp F   &kp COMMA  &kp DOT  &kp K   &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans     &trans   &trans
            >;

            label = "mine";
        };

        nav {
            bindings = <
&kp F1            &kp F2       &kp F3          &kp F4          &kp F5           &kp F6           &mmv MOVE_UP     &kp F7     &kp F8          &kp F9        &kp F10    &kp F11         &kp F12
&trans            &kp PAGE_UP  &kp BACKSPACE   &kp UP_ARROW    &kp DEL          &kp PAGE_DOWN    &mmv MOVE_DOWN   &kp PG_UP  &kp END         &trans        &kp HOME   &kp SCROLLLOCK  &kp C_PAUSE
&kp LEFT_SHIFT    &kp HOME     &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp END          &mmv MOVE_LEFT   &kp LEFT   &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT  &trans          &trans
&kp LEFT_CONTROL  &kt ESCAPE   &kp TAB         &trans          &kp ENTER        &trans           &mmv MOVE_RIGHT  &trans     &trans          &kp INSERT    &trans     &trans          &trans
&kp C_PP          &trans       &trans          &trans          &trans           &trans           &mkp LCLK        &trans     &trans          &trans        &trans     &trans
            >;

            display-name = "nav";
            sensor-bindings = <&inc_dec_kp C_NEXT C_PREV>;
        };

        num {
            bindings = <
&trans  &trans            &trans             &trans                &trans                 &trans            &trans  &kp KP_NUMLOCK  &trans           &trans           &trans           &trans           &trans
&trans  &kp EXCLAMATION   &kp AT_SIGN        &kp HASH              &kp DOLLAR             &kp PERCENT       &trans  &kp KP_DIVIDE   &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp KP_MULTIPLY  &trans
&trans  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp CARET         &trans  &kp KP_MINUS    &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp KP_PLUS      &trans
&trans  &kp CARET         &kp AMPERSAND      &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp UNDERSCORE    &trans  &kp EQUAL       &kp KP_NUMBER_1  &kp KP_N2        &kp KP_NUMBER_3  &kp KP_N0        &trans
&trans  &trans            &trans             &trans                &trans                 &trans            &trans  &trans          &trans           &trans           &trans           &trans
            >;

            label = "num";
        };

        sys {
            bindings = <
&out OUT_BLE    &bt BT_SEL 0     &bt BT_SEL 1     &bt BT_SEL 2     &bt BT_SEL 3     &bt BT_SEL 4       &mmv MOVE_UP     &kp F6  &kp F7  &kp F8      &kp F9     &kp F10      &trans
&out OUT_USB    &bt BT_CLR       &bt BT_CLR_ALL   &trans           &rgb_ug RGB_SPI  &rgb_ug RGB_SPD    &mmv MOVE_DOWN   &to 0   &to 5   &kp F11     &kp F12    &kp UNDER    &kp PLUS
&rgb_ug RGB_ON  &rgb_ug RGB_OFF  &rgb_ug RGB_EFF  &rgb_ug RGB_EFR  &rgb_ug RGB_BRI  &rgb_ug RGB_BRD    &mmv MOVE_LEFT   &trans  &trans  &trans      &trans     &kp LBRC     &kp RBRC
&trans          &sys_reset       &trans           &bootloader      &trans           &trans             &mmv MOVE_RIGHT  &trans  &trans  &sys_reset  &soft_off  &bootloader  &trans
&trans          &trans           &trans           &trans           &trans           &trans             &mkp LCLK        &trans  &trans  &trans      &trans     &trans
            >;

            sensor-bindings = <&inc_dec_kp C_FAST_FORWARD C_REWIND>;
            label = "sys";
        };

        game {
            display-name = "game";
            bindings = <
&kp ESC           &kp N1     &kp N2        &kp N3  &kp N4  &kp N5       &kp UP_ARROW     &kp N6     &kp N7     &kp N8     &kp N9           &kp N0         &kp MINUS
&kp TAB           &kp Q      &kp W         &kp E   &kp R   &kp T        &kp DOWN_ARROW   &kp Y      &kp U      &kp I      &kp O            &kp P          &kp BSLH
&kp LEFT_SHIFT    &kp A      &kp S         &kp D   &kp F   &kp G        &kp LEFT_ARROW   &kp H      &kp J      &kp K      &kp L            &kp SEMI       &kp APOS
&kp LEFT_CONTROL  &kp Z      &kp X         &kp C   &kp V   &kp B        &kp RIGHT_ARROW  &kp N      &kp M      &kp COMMA  &kp DOT          &kp FSLH       &kp ENTER
&kp C_MUTE        &kp LCTRL  &kp LEFT_GUI  &mo 2   &mo 2   &kp SPACE    &kp ENTER        &kp SPACE  &kp ENTER  &mo 3      &kp RIGHT_SHIFT  &kp BACKSPACE
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        activate_sys {
            if-layers = <2 3>;
            then-layer = <4>;
        };
    };
};
